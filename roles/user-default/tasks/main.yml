---

#checks

- name: Get old user
  shell: 'id -nu 1000'
  register: user_old
  changed_when: false

#- name: debug
#  debug:
#    msg: "User: {{ user_old.stdout }}"

- name: Get home
  command: ls /home/"{{ user_old.stdout }}"
  register: home_available
  ignore_errors: true
  changed_when: false

- name: Get user
  command: grep "{{ user_old.stdout }}" /etc/passwd
  register: user_available
  ignore_errors: true
  changed_when: false

- name: Get group
  command: grep "{{ user_old.stdout }}" /etc/group
  register: group_available
  ignore_errors: true
  changed_when: false

#actions

- name: Get variables
  include_vars:
    file: user.yml
    name: user

##TODO add new user and then deactivate old user after he is logged off with shell script
- name: Mod user home for {{ user['username'] }}
  user:
    name: "{{ user_old.stdout }}"
    group: "{{ user_old.stdout }}"
    home: "/home/{{ user['username'] }}"
    move_home: yes
  when: (user_old.stdout != user['username'])

- name: Mod user name for {{ user['username'] }}
  shell: /usr/sbin/usermod --login {{ user['username'] }} {{ user_old.stdout }}
  when: (user_old.stdout != user['username'])

- name: Mod user group for {{ user['username'] }}
  shell: /usr/sbin/groupmod --new-name {{ user['username'] }} {{ user_old.stdout }}
  when: (user_old.stdout != user['username'])

- name: Set authorized key
  authorized_key:
    user: "{{ user['username'] }}"
    state: present
    key: "{{ user['publickey'] }}"
